---
import project1 from '../../assets/project1.jpeg';
import project2 from '../../assets/project2.jpeg';
import '../../styles/global.css';

import IconCollection from '../../IconCollection/IconCollection.astro';
import Navbar from '../../conponent/Navbar.astro';
import BlogCard from '../../conponent/BlogCard.astro';
import Footer from '../../conponent/Footer.astro';
import AnimatedText from '../../conponent/AnimatedText.astro';


const postsPerPage = 6;

const blogData = Array.from({ length: 30 }, (_, index) => ({
   id: index + 1,
  title: `Blog Post Title ${index + 1}`,
  description: `This is the description for Blog Post Title ${index + 1}.`,
  view: Math.floor(Math.random() * 2000) + 1,
  postTime: Math.floor(Math.random() * 100) + 1,
}));



const serializedBlogData = JSON.stringify(blogData);

let searchQuery = '';
let filteredBlogData = blogData;
const totalPages = Math.ceil(blogData.length / postsPerPage);

---

<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='viewport' content='width=device-width' />
    <meta name='generator' content={Astro.generator} />
    <title>Blog</title>

  </head>
  <body class='mx-auto bg-stone-950 w-full'>
    <div
      class='bg-stone-950 px-4 md:px-12 flex justify-center items-center w-full overflow-y-hidden'
    >
      <section
        class='max-w-[673px] lg:max-w-[928px] xxl:max-w-[1344px] w-full mx-auto relative'
      >
        <div class='top-bg-section pb-12 relative z-10'>
          <Navbar />

          <AnimatedText
            text='blog_'
            dataValue='blog_'
            className='text-white text-[38px] md:text-7xl lg:text-[100px] relative  z-10 font-black font-craftworkGrotesk py-10 md:py-20 uppercase leading-[45px] md:leading-[86px] lg:leading-[120px]'
            style=''
          />

          <div
            class='flex items-center max-w-full md:max-w-[432px] relative z-10 mb-6 justify-between w-full bg-white/5 group hover:bg-blue-500/10 border border-white/20 rounded-full p-1 shadow-lg'
          >
            <div class='flex items-center pl-4 pr-2'>
              <IconCollection icon='searchIcon' className='w-6 h-6' />
              <input
                type='text '
                placeholder='Search by name'
                id="myInput"
                class='bg-transparent  border-none  text-white placeholder-gray-400 focus:outline-none ml-2 w-full max-w-[220px]'

              />
            </div>
            <button
            id="SearchButton"
              class='text-white max-w-[88px] w-full h-[45px] flex justify-center items-center text-lg font-normal font-generalSans bg-[#162149] group-hover:bg-blue-800 rounded-full mr-1'
            >
              Search
            </button>
          </div>

          <div id='blog-cards' class='flex flex-wrap gap-8 mb-20 relative z-10'>
            {
              filteredBlogData
                .slice(0, postsPerPage)
                .map((post,i) => <BlogCard {...post}/>)
            }
          </div>


          <div
            class='flex justify-center items-center space-x-4 text-white pb-24'
          >
            <button
              id='prev-page'
              class='w-12 h-12 flex justify-center items-center rounded-full bg-white/20 hover:bg-white group'
              disabled
            >
              <IconCollection
                icon='arrowLeft'
                className='w-9 h-9 fill-black group-hover:fill-white'
              />
            </button>
            <div class='flex items-center space-x-2'>
              <div id='current-page'>1</div>
              <div>of</div>
              <div id='total-pages'>{totalPages}</div>
            </div>
            <button
              id='next-page'
              class='w-12 h-12 flex justify-center items-center rounded-full bg-white/20 hover:bg-white group'
            >
              <IconCollection
                icon='arrowRight2'
                className='w-9 h-9 fill-black group-hover:fill-white'
              />
            </button>
          </div>
          <Footer />
        </div>
      </section>
    </div>
<script>

import project1 from '../../assets/project1.jpeg';
import project2 from '../../assets/project2.jpeg';

  const myInput = document.getElementById('myInput');

const handeSearchBlog = () =>{
   const inputValue = myInput.value.toLowerCase();

const blogData = Array.from({ length: 30 }, (_, index) => ({
   id: index + 1,
  title: `Blog Post Title ${index + 1}`,
  description: `This is the description for Blog Post Title ${index + 1}.`,
  view: Math.floor(Math.random() * 2000) + 1,
  postTime: Math.floor(Math.random() * 100) + 1,
}));
   const filteredBlogData = blogData.filter((post) =>
      post.title.toLowerCase().includes(inputValue)
    );
   let currentPage = 1;
    renderPosts(currentPage, filteredBlogData);
    updateButtons();
}
document.getElementById('SearchButton').addEventListener('click', handeSearchBlog);

  const blogData = JSON.parse(`{{serializedBlogData}}`);
  const postsPerPage = 6;
  let currentPage = 1;
  let filteredBlogData = blogData;

  const blogCards = document.getElementById('blog-cards');
  const prevPageButton = document.getElementById('prev-page');
  const nextPageButton = document.getElementById('next-page');
  const currentPageDisplay = document.getElementById('current-page');
  const totalPagesDisplay = document.getElementById('total-pages');



  function renderPosts(page, data) {
    let postsPerPage = 1
    const startIndex = (page - 1) * postsPerPage;
    const endIndex = startIndex + postsPerPage;
    let blogCards = document.getElementById('blog-cards');
    blogCards.innerHTML = '';

    data.slice(startIndex, endIndex).forEach((post) => {
      const postCard = document.createElement('div');
      postCard.classList.add(
        'relative',
        'max-w-full',
        'md:max-w-[48%]',
        'lg:max-w-[400px]',
        'w-full',
        'h-[284px]',
        'rounded-3xl',
        'group',
        'overflow-hidden'
      );
      postCard.innerHTML = `

        <div class="relative p-1 group cursor-pointe max-w-full md:max-w-[320px] lg:max-w-[420px] w-full">
  <span class="absolute top-0 right-0 left-0 bottom-0 group-hover:bg-gradient-to-r from-lime-400 to-blue-700 z-[2] rounded-3xl"></span>
  <div  class="rounded-3xl bg-black z-[3] opacity-100  relative ">
    <div class='w-full  relative z-[3] px-6 md:px-5 lg:px-8 py-6 md:py-9 bg-white/5 rounded-3xl backdrop-blur-[44px] group-hover:backdrop-blur-0 group flex-col justify-start items-start gap-7 inline-flex group transition-all duration-300 hover:bg-blue-500/10 hover:shadow-lg'>
  <div class='self-stretch grow shrink basis-0 flex-col justify-start items-start gap-5 flex'>
    <div class='self-stretch text-white text-2xl font-semibold font-craftworkGroteskleading-7'>
      ${post.title}
    </div>
    <div class='self-stretch text-white/90 text-lg font-normal font-generalSans leading-[27px] line-clamp-3'>
    ${post.description}
    </div>
  </div>
  <div class='self-stretch justify-between items-center inline-flex'>
    <div class='justify-start items-start md:items-center gap-2 md:gap-4 flex flex-col md:flex-row'>
      <div class='flex items-center gap-2'>
        <IconCollection icon='eyeIcon' className='h-6 w-6' />
        <div class='text-white text-lg md:text-base lg:text-lg font-medium font-generalSans leading-[27px]'>
          ${post.view}View
        </div>
      </div>
      <div class='flex items-center gap-2'>
        <IconCollection icon='clockIcon' className='h-6 w-6' />
        <div class='text-white text-lg md:text-base lg:text-lg font-medium font-generalSans leading-[27px]'>
           ${post.postTime}min
        </div>
      </div>
    </div>
    <div class='justify-start items-center gap-3 flex'>
      <div class='px-3 md:px-3 lg:px-5 py-3 bg-indigo-950 group-hover:bg-blue-800 rounded-[20px] justify-start items-center gap-2.5 flex'>
        <a href="blogDetails?id=${post.id}" class='text-white/90  text-lg  md:text-xs lg:text-lg font-light font-generalSans leading-[18px]'>
          Read full article
        </a>
      </div>
    </div>
  </div>
</div>
  </div>
</div>
      `;
      blogCards.appendChild(postCard);
    });
  }

  function updateButtons() {
    prevPageButton.disabled = currentPage === 1;
    nextPageButton.disabled =
      currentPage === Math.ceil(filteredBlogData.length / postsPerPage);
    currentPageDisplay.textContent = currentPage;
    totalPagesDisplay.textContent = Math.ceil(
      filteredBlogData.length / postsPerPage
    );
  }




  prevPageButton.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      renderPosts(currentPage, filteredBlogData);
      updateButtons();
    }
  });

  nextPageButton.addEventListener('click', () => {
    if (currentPage < Math.ceil(filteredBlogData.length / postsPerPage)) {
      currentPage++;
      renderPosts(currentPage, filteredBlogData);
      updateButtons();
    }
  });


  document.addEventListener('DOMContentLoaded', () => {
    // Ensure the input event listener is correctly bound after the DOM is fully loaded

    const searchInput = document.querySelector('input[type="text"]');
    if (searchInput) {
      searchInput.addEventListener('input', handleSearch);
    }

    // Initial render of posts
    renderPosts(currentPage, blogData);
    updateButtons();
  });

</script>




  </body>
</html>
